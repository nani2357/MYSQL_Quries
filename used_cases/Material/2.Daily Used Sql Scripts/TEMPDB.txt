-- This query finds out if one or more threads are waiting to acquire latch on pages in tempdb. Note, this DMV shows the 
current workers that are waiting. You will need to poll this DMV often to identify allocation bottleneck.

SELECT session_id, wait_duration_ms, resource_description
FROM sys.dm_os_waiting_tasks
WHERE wait_type LIKE 'PAGE%LATCH_%' 
      AND resource_description like '2:%';
      
      
-- You can use the following DMV query to identify the currently executing query this is causing the most allocations and deallocations in tempdb.

SELECT TOP 10 t1.session_id, t1.request_id, t1.task_alloc,
              t1.task_dealloc, t2.plan_handle,
       (SELECT SUBSTRING (text, t2.statement_start_offset/2 + 1,
            (CASE WHEN statement_end_offset = -1
                  THEN LEN(CONVERT(nvarchar(MAX),text)) * 2
                  ELSE statement_end_offset
             END - t2.statement_start_offset)/2)
        FROM sys.dm_exec_sql_text(sql_handle)) AS query_text
FROM (SELECT session_id, request_id, 
         SUM(internal_objects_alloc_page_count +
                 user_objects_alloc_page_count) AS task_alloc,
          SUM(internal_objects_dealloc_page_count +
                  user_objects_dealloc_page_count) AS task_dealloc
       FROM sys.dm_db_task_space_usage
       GROUP BY session_id, request_id) AS t1,
  sys.dm_exec_requests AS t2
WHERE t1.session_id = t2.session_id AND
     (t1.request_id = t2.request_id) AND t1.session_id > 50
ORDER BY t1.task_alloc DESC;

--The following query returns the tempdb space used by user and by internal objects. 
Select
    SUM (user_object_reserved_page_count)*8 as user_objects_kb,
    SUM (internal_object_reserved_page_count)*8 as internal_objects_kb,
    SUM (version_store_reserved_page_count)*8  as version_store_kb,
    SUM (unallocated_extent_page_count)*8 as freespace_kb
From sys.dm_db_file_space_usage
Where database_id = 2

--You can run the following script to enumerate all the tempdb objects.

DECLARE userobj_cursor CURSOR FOR 
select 
     sys.schemas.name + '.' + sys.objects.name 
from sys.objects, sys.schemas
where object_id > 100 and 
      type_desc = 'USER_TABLE'and 
      sys.objects.schema_id = sys.schemas.schema_id
go

open userobj_cursor
go

declare @name varchar(256)
fetch userobj_cursor into @name
while (@@FETCH_STATUS = 0) 
begin
    exec sp_spaceused @objname = @name
        fetch userobj_cursor into @name	
end
close userobj_cursor

--The following query returns the top two longest-running transactions that depend on the versions in the version store.
select top 2 
    transaction_id, 
    transaction_sequence_num, 
    elapsed_time_seconds 
from sys.dm_tran_active_snapshot_database_transactions
order by elapsed_time_seconds DESC

--You can use the following query to find the top sessions that are allocating internal objects. 
Note that this query includes only the tasks that have been completed in the sessions.

select 
    session_id, 
    internal_objects_alloc_page_count, 
    internal_objects_dealloc_page_count
from sys.dm_db_session_space_usage
order by internal_objects_alloc_page_count DESC


--You can use the following query to find the top user sessions that are allocating internal objects, including currently active tasks.
 
SELECT 
    t1.session_id,
    (t1.internal_objects_alloc_page_count + task_alloc) as allocated,
    (t1.internal_objects_dealloc_page_count + task_dealloc) as	
    deallocated 
from sys.dm_db_session_space_usage as t1, 
    (select session_id, 
        sum(internal_objects_alloc_page_count)
            as task_alloc,
    sum (internal_objects_dealloc_page_count) as 
        task_dealloc 
      from sys.dm_db_task_space_usage group by session_id) as t2
where t1.session_id = t2.session_id and t1.session_id >50
order by allocated DESC


--After you have isolated the task or tasks that are generating a lot of internal object allocations, 
you can find out which Transact-SQL statement it is and its query plan for a more detailed analysis.

select 
    t1.session_id, 
    t1.request_id, 
    t1.task_alloc,
    t1.task_dealloc,
    t2.sql_handle, 
    t2.statement_start_offset, 
    t2.statement_end_offset, 
    t2.plan_handle
from (Select session_id, 
             request_id,
             sum(internal_objects_alloc_page_count) as task_alloc,
             sum (internal_objects_dealloc_page_count) as task_dealloc 
      from sys.dm_db_task_space_usage 
      group by session_id, request_id) as t1, 
      sys.dm_exec_requests as t2
where t1.session_id = t2.session_id and 
     (t1.request_id = t2.request_id)
order by t1.task_alloc DESC


--You can use the sql_handle and plan_handle columns to get the SQL statement and the query plan as follows.

select text from sys.dm_exec_sql_text(@sql_handle)
select * from sys.dm_exec_query_plan(@plan_handle)


--You can use the following query to find all tasks waiting on tempdb pages 

      select 
          session_id, 
          wait_duration_ms, 
          resource_description, 
          @now
      from sys.dm_os_waiting_tasks
      where wait_type like 'PAGE%LATCH_%' and
            resource_description like '2:%'
      